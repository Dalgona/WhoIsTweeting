<UserControl
    x:Class="WhoIsTweeting.Views.MainView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:WhoIsTweeting"
    xmlns:view="clr-namespace:WhoIsTweeting.Views"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:cm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
    xmlns:core="clr-namespace:Wit.Core;assembly=Wit.Core"
    xmlns:ctrl="clr-namespace:Wit.Controls"
    xmlns:vm="clr-namespace:Wit.VM;assembly=Wit.VM"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type={x:Type vm:MainViewModel}}"
    d:DesignHeight="600"
    d:DesignWidth="300">
    <UserControl.Resources>
        <CollectionViewSource x:Key="UserListSource" Source="{Binding Service.UserList}" Filter="FilterUserList" IsLiveFilteringRequested="True" IsLiveSortingRequested="True" IsLiveGroupingRequested="True">
            <CollectionViewSource.LiveFilteringProperties>
                <sys:String>Status</sys:String>
            </CollectionViewSource.LiveFilteringProperties>
            <CollectionViewSource.LiveSortingProperties>
                <sys:String>MinutesFromLastTweet</sys:String>
            </CollectionViewSource.LiveSortingProperties>
            <CollectionViewSource.LiveGroupingProperties>
                <sys:String>Status</sys:String>
            </CollectionViewSource.LiveGroupingProperties>
            <CollectionViewSource.SortDescriptions>
                <cm:SortDescription PropertyName="MinutesFromLastTweet" Direction="Ascending" />
            </CollectionViewSource.SortDescriptions>
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="Status" />
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="32"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0" Orientation="Horizontal">
            <Label Margin="4,0,0,0" Content="Wit" VerticalContentAlignment="Center" FontWeight="Bold" Foreground="MediumSpringGreen"/>
        </StackPanel>
        <Menu Margin="0" Grid.Row="1" VerticalAlignment="Top">
            <MenuItem Padding="6,2">
                <MenuItem.Header>
                    <TextBlock>
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Service.State, Mode=OneWay}" Value="NeedConsumerKey">
                                        <Setter Property="Text" Value="{x:Static local:Strings.Menu_Main_NeedConsumer}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Service.State, Mode=OneWay}" Value="SignInRequired">
                                        <Setter Property="Text" Value="{x:Static local:Strings.Menu_Main_NeedSignIn}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSignedIn}" Value="True">
                                        <Setter Property="Text" Value="{Binding Service.Me.ScreenName, StringFormat={}@{0}}" />
                                    </DataTrigger>
                                </Style.Triggers>
                                <Setter Property="Text" Value="--" />
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </MenuItem.Header>
                <MenuItem Header="{x:Static local:Strings.Menu_Main_SignIn}" Command="{Binding SignInCommand}"/>
                <MenuItem Header="{x:Static local:Strings.Menu_Main_Consumer}" Command="{Binding OpenKeyCommand}"/>
                <Separator/>
                <MenuItem Header="{x:Static local:Strings.Menu_Main_Interval}" Command="{Binding OpenIntervalCommand}"/>
                <MenuItem Header="{x:Static local:Strings.Menu_Main_Statistics}" Command="{Binding OpenStatCommand}"/>
                <Separator/>
                <MenuItem Header="{x:Static local:Strings.Menu_Main_About}" Command="{Binding OpenAboutCommand}"/>
                <MenuItem Header="{x:Static local:Strings.Menu_Main_Quit}" Command="{Binding QuitCommand}"/>
            </MenuItem>
            <MenuItem Header="{x:Static local:Strings.Menu_View}" Padding="6,2">
                <MenuItem Header="{x:Static local:Strings.Menu_View_Topmost}" IsChecked="{Binding AlwaysOnTop, Mode=TwoWay}" IsCheckable="True"/>
                <Separator/>
                <MenuItem Header="{x:Static local:Strings.Menu_View_ShowAway}" IsChecked="{Binding ShowAway, Mode=TwoWay}" IsCheckable="True"/>
                <MenuItem Header="{x:Static local:Strings.Menu_View_ShowOffline}" IsChecked="{Binding ShowOffline, Mode=TwoWay}" IsCheckable="True"/>
            </MenuItem>
        </Menu>
        <StackPanel Grid.Row="2" Background="#FFFF4000">
            <StackPanel.Style>
                <Style TargetType="StackPanel">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsErrorSet}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Style>
            <Label FontWeight="Bold" Foreground="White" Margin="2,0" Padding="5,5,5,2">
                <Label.Style>
                    <Style TargetType="Label">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Service.LastError, Mode=OneWay}" Value="ApiError">
                                <Setter Property="Content" Value="{x:Static local:Strings.Critical_ApiError}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Service.LastError, Mode=OneWay}" Value="NetError">
                                <Setter Property="Content" Value="{x:Static local:Strings.Critical_NetError}"/>
                            </DataTrigger>
                        </Style.Triggers>
                        <Setter Property="Content" Value="No Error" />
                    </Style>
                </Label.Style>
            </Label>
            <Label Foreground="White" Margin="2,0" Padding="5,2,5,5">
                <Label.Content>
                    <TextBlock TextWrapping="WrapWithOverflow">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsErrorSet}" Value="True" />
                                            <Condition Binding="{Binding IsRetryPending}" Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Text" Value="{Binding RetryTimeout, StringFormat={x:Static local:Strings.Critical_AutoRetry_Message}}" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsErrorSet}" Value="True" />
                                            <Condition Binding="{Binding IsRetryPending}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Text" Value="{Binding RetryCount, StringFormat={x:Static local:Strings.Critical_AutoRetry_Failed}}" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                                <Setter Property="Text" Value="This program is running normally." />
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Label.Content>
            </Label>
            <Button Content="{x:Static local:Strings.Button_TryAgain}" HorizontalAlignment="Right" Margin="5" Padding="15,3" Click="OnTryAgainClicked"/>
        </StackPanel>
        <ListBox x:Name="listBox" Grid.Row="3" ItemsSource="{Binding Source={StaticResource UserListSource}}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" BorderThickness="0">
            <ListBox.ContextMenu>
                <ContextMenu>
                    <ContextMenu.Style>
                        <Style TargetType="ContextMenu">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedItem}" Value="{x:Null}">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Style>
                    <MenuItem IsEnabled="False" Foreground="#c0000000">
                        <MenuItem.Header>
                            <TextBlock Text="{Binding SelectedItem.Name}"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem IsEnabled="False" Foreground="#c0000000">
                        <MenuItem.Header>
                            <TextBlock Text="{Binding SelectedItem.ScreenName, StringFormat=@{0}}"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="{x:Static local:Strings.Menu_Context_Mention}" Command="{Binding OpenMentionCommand}" CommandParameter="{Binding SelectedItem}"/>
                    <MenuItem Header="{x:Static local:Strings.Menu_Context_Profile}" Command="{Binding OpenProfileCommand}" CommandParameter="{Binding SelectedItem}"/>
                </ContextMenu>
            </ListBox.ContextMenu>
            <ListBox.GroupStyle>
                <GroupStyle>
                    <GroupStyle.HeaderTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Label Foreground="Gray" FontSize="16">
                                    <TextBlock>
                                        <Run Text="{Binding Name, Mode=OneWay}" /> (<Run Text="{Binding ItemCount, Mode=OneWay}" />)
                                    </TextBlock>
                                </Label>
                            </StackPanel>
                        </DataTemplate>
                    </GroupStyle.HeaderTemplate>
                </GroupStyle>
            </ListBox.GroupStyle>
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate DataType="{x:Type core:UserListItem}">
                    <view:UserListItemView />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <StatusBar Grid.Row="4" Background="#FF333333">
            <Label Content="{Binding StatOnline, Mode=OneWay}" ContentStringFormat="{x:Static local:Strings.Status_Online}" Padding="0" Foreground="MediumSpringGreen"/>
            <Label Content="{Binding StatAway, Mode=OneWay}" ContentStringFormat="{x:Static local:Strings.Status_Away}" Padding="0" Foreground="LightGray"/>
            <Label Content="{Binding StatOffline, Mode=OneWay}" ContentStringFormat="{x:Static local:Strings.Status_Offline}" Padding="0" Foreground="DimGray"/>
            <Label Padding="0" Foreground="#FFFF8000">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="FontFamily" Value="Segoe UI Symbol"/>
                        <Setter Property="Content" Value=""/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding StatUpdating, Mode=OneWay}" Value="True">
                                <Setter Property="Content" Value="&#xe117;"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
        </StatusBar>
    </Grid>
</UserControl>
